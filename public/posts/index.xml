<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Manjaro</title>
    <link>https://m4nj4r0.github.io/blog/posts/</link>
    <description>Recent content in Posts on Manjaro</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Mon, 30 Jun 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://m4nj4r0.github.io/blog/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>GoogleCTF 2025 | multiarch</title>
      <link>https://m4nj4r0.github.io/blog/posts/googlectf-2025--multiarch/</link>
      <pubDate>Sun, 29 Jun 2025 23:55:07 +0200</pubDate>
      <guid>https://m4nj4r0.github.io/blog/posts/googlectf-2025--multiarch/</guid>
      <description>&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;&#xA;&lt;p&gt;This weekend, I played GoogleCTF to try out some of the challenges, since this CTF is highly rated on CTFTime.&#xA;The first challenges I solved were multiarch part 1 &amp;amp; 2, which I found to be the most interesting,&#xA;even though they were relatively easy compared to the rest of the CTF.&lt;/p&gt;&#xA;&lt;p&gt;First part was a reverse engineering challenge, which isn’t my main category, but I do it because binary exploitation&#xA;usually requires some reversing in almost every challenge. This time, it was impossible for me to do the binary exploitation part without&#xA;reversing it first. The binary was a &amp;ldquo;virtual machine&amp;rdquo;-type challenge — an interpreter for custom bytecode provided with the challenge&#xA;in a file called &lt;code&gt;crackme.masm&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>D^3CTF 2025 | d3cgi</title>
      <link>https://m4nj4r0.github.io/blog/posts/d3ctf-2025--d3cgi/</link>
      <pubDate>Mon, 02 Jun 2025 00:12:54 +0200</pubDate>
      <guid>https://m4nj4r0.github.io/blog/posts/d3ctf-2025--d3cgi/</guid>
      <description>&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;&#xA;&lt;p&gt;A few days ago, I played &lt;strong&gt;D^3CTF 2025&lt;/strong&gt; to try out some medium and hard PWN challenges.&lt;br&gt;&#xA;This was the only challenge I managed to solve, and I believe it was the easiest one.&lt;br&gt;&#xA;It was a fun challenge to solve and a valuable experience, as it involved a real-world vulnerability.&lt;/p&gt;&#xA;&lt;p&gt;The challenge comes with a &lt;code&gt;challenge&lt;/code&gt; binary, a &lt;code&gt;lighttpd&lt;/code&gt; binary, a &lt;code&gt;libs/&lt;/code&gt; directory, &lt;code&gt;lighttpd.conf&lt;/code&gt;, a &lt;code&gt;Dockerfile&lt;/code&gt;,&#xA;and some shell scripts to simplify setup in a Docker container.&lt;br&gt;&#xA;The &lt;code&gt;challenge&lt;/code&gt; binary is a CGI application served over the web using the Lighttpd web server.&lt;br&gt;&#xA;Here&amp;rsquo;s the checksec output for the &lt;code&gt;challenge&lt;/code&gt; binary:&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
